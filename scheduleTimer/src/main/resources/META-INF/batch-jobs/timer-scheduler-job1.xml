<?xml version="1.0" encoding="UTF-8"?>

<!--
 Copyright (c) 2016-2018 Red Hat, Inc. and/or its affiliates.

 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html

 Contributors:
 Cheng Fang - Initial API and implementation
-->

<job id="timer-scheduler-job1" xmlns="http://xmlns.jcp.org/xml/ns/javaee"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/jobXML_1_0.xsd"
     version="1.0">
    <listeners>
        <listener ref="org.jberet.schedule.SchedulingJobListener">
            <properties>
                <property name="initialDelay"  value="#{jobParameters['initialDelay']}?:-1;"/>

                <!--
                <property name="stopAfterTime" value="Jan 28, 2018 11:04:30 PM"/>
                -->
                <property name="stopAfterTime" value="#{jobParameters['stopAfterTime']}"/>

                <!--
                only when current job execution failed or was stopped, will the next execution be scheduled
                <property name="onBatchStatus" value="FAILED, STOPPED"/>
                -->
            </properties>
        </listener>
    </listeners>
    <step id="timer-scheduler-job1.step1">
        <batchlet>
            <properties>
                <property name="testName" value="#{jobParameters['testName']}"/>
            </properties>
            <script type="javascript">
                function process() {
                    var testName = batchProperties.get('testName');

                    if(testName === 'fail') {
                        throw 'This job is designed to fail.';
                    }

                    var stepName = stepContext.getStepName();
                    var d = new Date();
                    var msg = d + ', testName: ' + testName + ', stepName: ' + stepName;
                    print(msg);
                    jobContext.setExitStatus(msg);
                    return msg;
                }
            </script>
        </batchlet>
    </step>
</job>
